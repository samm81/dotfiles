snippet strict "unnofficial strict mode"
	#!/bin/sh
	# unnofficial POSIX shell strict mode
	set -o errexit
	set -o nounset

	IFS=\$(printf '\n\t')

	[ "\${TRACE:-0}" = "1" ] && set -o xtrace

	usage() {
		filename="$(basename "\$0")"
		echo "usage: ./\${filename} <arg one> <arg two>"
		echo '  this is an awesome \`sh\` script to make your life better'
		exit
	}

	[ "\${1:-}" = '--help' ] && usage
	[ "\${1:-}" = '-h' ] && usage

	cd "\$(dirname "\$0")"

	main() {
		echo "\${1:?missing arg}"
	}

	main "\$@"

	exit 0

snippet exit-trap "exit trap to cleanup on error; redsymbol.net"
	# exit trap, to do cleanup on errors
	# http://redsymbol.net/articles/bash-exit-traps/
	finish() {
			echo ""
	}
	trap finish EXIT INT

snippet check_installed
	check_installed() {
		test "\$(command -v "\$1")"
	}

snippet redirect-std "std(out|err) redirection from within script"
	# stdout
	exec > /dev/null
	# stderr
	exec 2>&1

snippet shellcheck-disable
	# shellcheck disable=${1}

snippet docker-dev-build
	#!/bin/sh

	dirname=\$(basename "\$PWD")
	dirname_lower=\$(echo "\$dirname" | tr '[:upper:]' '[:lower:]')
	IMAGE_NAME="local-\${dirname_lower}"

	DOCKERFILE_NAME='dev.Dockerfile'

	docker buildx build \
		--file "\$DOCKERFILE_NAME" \
		--tag "\$IMAGE_NAME" \
		--build-arg "UID=\$(id -u)" \
		--build-arg "GID=\$(id -g)" \
		.

	if [ ! "\$?" ]; then
		notify-send "\$IMAGE_NAME failed !"
	else
		notify-send "\$IMAGE_NAME built !"
	fi

snippet docker-dev-run
	#!/bin/sh

	dirname=\$(basename "\$PWD")
	dirname_lower=\$(echo "\$dirname" | tr '[:upper:]' '[:lower:]')
	IMAGE_NAME="local-\${dirname_lower}"

	#PORT_HOST='57541'
	#PORT_CONTAINER='8080'
	#  -p "\${PORT_HOST:?PORT_HOST not set}:\${PORT_CONTAINER:?PORT_CONTAINER not set}" \

	docker run \
		--interactive --tty \
		--rm \
		--user "\$(id -u):\$(id -g)" \
		-v "\$(pwd):/app/src" \
		-v "\${HOME}/xorkspace/\${dirname}:/vids" \
		"\$IMAGE_NAME" \
		"\$@"

snippet temp-dir
	temp_dir=\$(mktemp -d)
	cleanup() { rm -rf "\$temp_dir"; }
	trap cleanup EXIT

snippet require
	available() { command -v "\$1" >/dev/null; }
	require() {
			local missing='' tool
			for tool in "\$@"; do
					if ! available "\$tool"; then
							missing="\$missing \$tool"
					fi
			done

			echo "\$missing"
	}

	needs=\$(require curl awk grep sed tee xargs)
	if [ -n "\$needs" ]; then
			echo "err: the following tools are required but missing:"
			for need in \$needs; do
					echo "  - \$need"
			done
			exit 1
	fi

snippet cat-sudo
	cat <<EOF | sudo tee "\$file" > /dev/null
	\${contents}
	EOF

snippet read-stdin-loop
	while read -r f; do echo "\$f"; done

snippet colors
  set +e
  # use colors, but only if connected to a terminal that supports them
  if which tput >/dev/null 2>&1; then
    ncolors=\$(tput colors)
  fi
  [ -t 1 ] && [ -n "\${ncolors:-}" ] && [ "\${ncolors:-}" -ge 8 ]
  has_colors=\$?
  set -e

  RED="\$( (( has_colors == 0 )) && tput setaf 1 || echo '' )"
  GREEN="\$( (( has_colors == 0 )) && tput setaf 2 || echo '' )"
  YELLOW="\$( (( has_colors == 0 )) && tput setaf 3 || echo '' )"
  BLUE="\$( (( has_colors == 0 )) && tput setaf 4 || echo '' )"
  BOLD="\$( (( has_colors == 0 )) && tput bold || echo '' )"
  NORMAL="\$( (( has_colors == 0 )) && tput sgr0 || echo '' )"

  info () {
      [[ -n \${1:-} ]] && echo "\${BLUE}\${1}\${NORMAL}" >&2
  }
  warn () {
      [[ -n \${1:-} ]] && echo "\${YELLOW}\${1}\${NORMAL}" >&2
  }
  success () {
      [[ -n \${1:-} ]] && echo "\${GREEN}\${1}\${NORMAL}" >&2
  }
  err () {
      [[ -n \${1:-} ]] && echo "\${RED}\${1}\${NORMAL}" >&2
  }
  fail () {
      [[ -n \${1:-} ]] && echo "\${BOLD}\${RED}\${1}\${NORMAL}" >&2
      exit "\${2:-1}"
  }

snippet sigint-ctrl-c
  # handle \`SIGINT\` (Ctrl-C) at the script level
  # shellcheck disable=SC2317
  handle_sigint() {
      exit 130
  }

  # Set up trap to catch SIGINT
  trap 'handle_sigint' INT
