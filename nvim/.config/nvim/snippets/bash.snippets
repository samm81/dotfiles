snippet strict "unnoficial strict mode for bash > 4.3; redsymbol.net"
	#!/usr/bin/env bash
	# unnoficial strict mode, note Bash<=4.3 chokes on empty arrays with set -u
	# http://redsymbol.net/articles/unofficial-bash-strict-mode/
	set -euo pipefail
	IFS=$'\n\t'
	shopt -s nullglob globstar
	#set -o xtrace # set debugging flag, aka set -x

	# never end a file with a short-curcuit!

snippet colors "bash color helpers"
	set +e
	# use colors, but only if connected to a terminal that supports them
	if which tput >/dev/null 2>&1; then
		ncolors=$(tput colors)
	fi
	[ -t 1 ] && [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]
	has_colors=$?
	set -e

	RED="$( (( has_colors == 0 )) && tput setaf 1 || echo '' )"
	GREEN="$( (( has_colors == 0 )) && tput setaf 2 || echo '' )"
	YELLOW="$( (( has_colors == 0 )) && tput setaf 3 || echo '' )"
	BLUE="$( (( has_colors == 0 )) && tput setaf 4 || echo '' )"
	BOLD="$( (( has_colors == 0 )) && tput bold || echo '' )"
	NORMAL="$( (( has_colors == 0 )) && tput sgr0 || echo '' )"

	info () {
			[[ -n ${1:-} ]] && echo "${BLUE}${1}${NORMAL}" >&2
	}
	warn () {
			[[ -n ${1:-} ]] && echo "${YELLOW}${1}${NORMAL}" >&2
	}
	success () {
			[[ -n ${1:-} ]] && echo "${GREEN}${1}${NORMAL}" >&2
	}
	err () {
			[[ -n ${1:-} ]] && echo "${RED}${1}${NORMAL}" >&2
	}
	fail () {
			[[ -n ${1:-} ]] && echo "${BOLD}${RED}${1}${NORMAL}" >&2
			exit "${2:-1}"
	}

snippet exit-trap "exit trap to cleanup on error; redsymbol.net"
	# exit trap, to do cleanup on errors
	# http://redsymbol.net/articles/bash-exit-traps/
	finish() {
			echo ""
	}
	trap finish EXIT

snippet redirect-std "std(out|err) redirection from within script"
	# stdout
	exec > /dev/null
	# stderr
	exec 2>&1

snippet opts "opt parsing with a simple while loop"
	while true; do
		case "$1" in
			'-1'|'--opt1') opt1="$2"; shift 2 ;;
			'-2'|'--opt2') opt2="$2"; shift 2 ;;
			*) default="$1"; shift; break ;;
		esac
	done
